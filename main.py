import os
import json
import datetime
import requests
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# üîê Scopes: —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

# ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å credentials.json –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
if not os.path.exists("credentials.json"):
    creds_data = os.environ.get("CREDENTIALS_JSON")
    if creds_data:
        with open("credentials.json", "w") as f:
            f.write(creds_data)
    else:
        raise Exception("‚ùóÔ∏è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# üîë –ü–æ–ª—É—á–∏—Ç—å Google Calendar —Å–µ—Ä–≤–∏—Å
def get_calendar_service():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            auth_url, _ = flow.authorization_url(prompt='consent')

            print("\nüîó –ü–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n", auth_url)
            code = input("üëâ –í—Å—Ç–∞–≤—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ")
            flow.fetch_token(code=code)
            creds = flow.credentials

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            with open('token.json', 'w') as token:
                token.write(creds.to_json())

    return build('calendar', 'v3', credentials=creds)

# üì£ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord
def send_to_discord(message):
    webhook_url = os.environ.get("DISCORD_WEBHOOK_URL")
    if webhook_url:
        response = requests.post(webhook_url, json={"content": message})
        if response.status_code != 204:
            print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Discord:", response.text)
    else:
        print("‚ùó DISCORD_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# üìÖ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
def check_upcoming_events():
    service = get_calendar_service()
    now = datetime.datetime.utcnow()
    now_iso = now.isoformat() + 'Z'
    future = (now + datetime.timedelta(hours=1)).isoformat() + 'Z'

    events_result = service.events().list(
        calendarId='primary',
        timeMin=now_iso,
        timeMax=future,
        singleEvents=True,
        orderBy='startTime'
    ).execute()

    events = events_result.get('items', [])

    if not events:
        print("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å.")
        return

    for event in events:
        summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        start = event['start'].get('dateTime', event['start'].get('date'))
        message = f"üìÖ –°–æ–±—ã—Ç–∏–µ: **{summary}**\nüïí –í—Ä–µ–º—è: {start}"
        send_to_discord(message)

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    send_to_discord("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    check_upcoming_events()
